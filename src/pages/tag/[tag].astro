---
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import PathHeader from '../../components/PathHeader.astro';
import PostFooter from '../../components/PostFooter.astro';
import WordCount from '../../components/WordCount.astro';
import { marked } from 'marked';

// Get all unique tags from all collections
export async function getStaticPaths() {
  const trailEntries = await getCollection('trail');
  const thoughtsEntries = await getCollection('thoughts');
  
  // Extract all unique tags from all collections
  const allTags = new Set<string>();
  
  trailEntries.forEach((entry: CollectionEntry<'trail'>) => {
    if (entry.data.tags) {
      entry.data.tags.forEach((tag: string) => allTags.add(tag));
    }
  });
  
  thoughtsEntries.forEach((entry: CollectionEntry<'thoughts'>) => {
    if (entry.data.tags) {
      entry.data.tags.forEach((tag: string) => allTags.add(tag));
    }
  });
  
  // Create a path for each tag
  return Array.from(allTags).map((tag: string) => ({
    params: { tag },
    props: { tag }
  }));
}

const { tag } = Astro.props;

// Get all posts with this tag
const trailEntries = await getCollection('trail');
const thoughtsEntries = await getCollection('thoughts');

// Filter trail entries with this tag
const trailWithTag = trailEntries.filter((post: CollectionEntry<'trail'>) => 
  post.data.tags && post.data.tags.includes(tag)
).map((post: CollectionEntry<'trail'>) => ({
  ...post,
  collection: 'trail' as const
}));

// Filter thoughts entries with this tag
const thoughtsWithTag = thoughtsEntries.filter((post: CollectionEntry<'thoughts'>) => 
  post.data.tags && post.data.tags.includes(tag)
).map((post: CollectionEntry<'thoughts'>) => ({
  ...post,
  collection: 'thoughts' as const
}));

// Combine and sort all posts with this tag
const postsWithTag = [...trailWithTag, ...thoughtsWithTag].sort((a, b) => {
  // Use dateModified if available, otherwise fall back to dateCreated
  const dateA = new Date(a.data.dateModified || a.data.dateCreated).getTime();
  const dateB = new Date(b.data.dateModified || b.data.dateCreated).getTime();
  
  // First sort by date (newest first)
  if (dateA !== dateB) {
    return dateB - dateA;
  }
  
  // If dates are the same, sort alphabetically by title
  return a.data.title.localeCompare(b.data.title);
});

// Function to get word count from markdown content
function getWordCount(content: string): number {
  const text = content.replace(/\s+/g, ' ').trim();
  return text.split(' ').length;
}

// Function to get first paragraph from markdown content
function getFirstParagraph(content: string): string {
  const paragraphs = content.split('\n\n');
  return paragraphs[0] || '';
}

// Process each post
const processedPosts = await Promise.all(
  postsWithTag.map(async (post) => {
    const wordCount = getWordCount(post.body || '');
    const collection = post.collection;
    
    if (collection === 'trail') {
      // Trail post processing
      const showFullContent = wordCount <= 200;
      const contentToShow = showFullContent ? post.body : getFirstParagraph(post.body || '');
      
      // Create title HTML for trail posts
      const titleHTML = `<a href="${post.data.link}" target="_blank" class="text-white hover:text-gray-300 transition-colors underline decoration-dotted hover:decoration-solid">${post.data.title}</a> ‚Äî‚Äî `;
      
      return {
        post,
        collection,
        postSlug: `${new Date(post.data.dateCreated || Date.now()).toISOString().split('T')[0]}/${post.data.slug}`,
        wordCount,
        showFullContent,
        contentToShow,
        titleHTML,
        description: ''
      };
    } else {
      // Thoughts post processing
      const firstParagraph = getFirstParagraph(post.body || '');
      
      return {
        post,
        collection,
        postSlug: post.data.slug,
        wordCount,
        showFullContent: false,
        contentToShow: firstParagraph,
        titleHTML: '',
        description: post.data.description || ''
      };
    }
  })
);

// Path segments for the header
const pathSegments = [
  { label: "‚ú® salnad", href: "/" },
  { label: "üè∑Ô∏è tags", href: "/tag" },
  { label: `#${tag}`, href: `/tag/${tag}`, isActive: true }
];
---

<BaseLayout title={`~ / tag / ${tag}`}>
  <div class="max-w-3xl mx-auto px-4 py-12">
    <PathHeader segments={pathSegments} />
    
    <h1 class="text-2xl font-bold mb-8 text-white">Posts tagged with #{tag}</h1>
    
    <div class="space-y-12">
      {processedPosts.length > 0 ? (
        processedPosts.map(({ post, collection, wordCount, showFullContent, contentToShow, titleHTML, postSlug, description }) => (
          <div class="border-b border-gray-700 pb-8 mb-8 last:border-0">
            <div class="text-gray-300">
              <div class="prose prose-invert max-w-none">
                {collection === 'trail' ? (
                  showFullContent ? (
                    <div class="trail-post text-left">
                      <Fragment set:html={titleHTML} />
                      <Fragment set:html={marked.parse(post.body || '')} />
                    </div>
                  ) : (
                    <div class="trail-post text-left">
                      <Fragment set:html={titleHTML + marked.parse(contentToShow || '')} />
                      <WordCount count={wordCount} url={`/trail/${postSlug}`} />
                    </div>
                  )
                ) : (
                  <div class="thoughts-post text-left">
                    <h2 class="text-xl font-bold mb-1 text-left">
                      <a href={`/thoughts/${postSlug}`} class="text-white hover:text-gray-300 transition-colors">
                        {post.data.title}
                      </a>
                    </h2>
                    {description && (
                      <p class="text-gray-400 mb-3 italic text-left">{description}</p>
                    )}
                    <div class="mt-2 text-left">
                      <Fragment set:html={marked.parse(contentToShow || '')} />
                      <WordCount count={wordCount} url={`/thoughts/${postSlug}`} />
                    </div>
                  </div>
                )}
              </div>
            </div>
            
            <PostFooter 
              date={post.data.dateModified || post.data.dateCreated} 
              tags={post.data.tags} 
              slug={postSlug} 
              baseUrl={collection === 'trail' ? '/trail' : '/thoughts'} 
              icon={collection === 'trail' ? 'üîé' : 'üß†'}
            />
          </div>
        ))
      ) : (
        <div class="text-gray-400">No posts found with this tag.</div>
      )}
    </div>
  </div>
</BaseLayout>

<style> 
  /* Trail post styling */
  .trail-post :global(p:first-of-type) {
    display: inline;
  }
  
  /* Thoughts post styling */
  .thoughts-post :global(p:first-of-type) {
    display: inline;
  }
  
  /* Ensure all content is left-aligned */
  .thoughts-post :global(*) {
    text-align: left;
  }
</style> 